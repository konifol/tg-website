#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è Bot Creator Platform
"""

import json
import requests

def test_button_blocks():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–ª–æ–∫–æ–≤
    try:
        response = requests.get('http://localhost:5002/api/bot-blocks')
        if response.status_code == 200:
            blocks = response.json()
            print("‚úÖ API –±–ª–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if 'inline_keyboard' in blocks:
                inline_block = blocks['inline_keyboard']
                print(f"‚úÖ –ë–ª–æ–∫ '–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏' –Ω–∞–π–¥–µ–Ω:")
                print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {inline_block['name']}")
                print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {inline_block['description']}")
                print(f"   - –ü–æ–ª—è: {len(inline_block['fields'])}")
                
                for field in inline_block['fields']:
                    print(f"     - {field['name']}: {field['type']} ({'–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ' if field['required'] else '–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ'})")
            
            if 'reply_keyboard' in blocks:
                reply_block = blocks['reply_keyboard']
                print(f"‚úÖ –ë–ª–æ–∫ '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞' –Ω–∞–π–¥–µ–Ω:")
                print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {reply_block['name']}")
                print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {reply_block['description']}")
                print(f"   - –ü–æ–ª—è: {len(reply_block['fields'])}")
                
                for field in reply_block['fields']:
                    print(f"     - {field['name']}: {field['type']} ({'–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ' if field['required'] else '–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ'})")
            
            print(f"\nüìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–ª–æ–∫–æ–≤: {len(blocks)}")
            
        else:
            print(f"‚ùå API –±–ª–æ–∫–æ–≤ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def test_json_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é JSON –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    test_cases = [
        {
            'name': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫',
            'json': '[["–î–∞", "–ù–µ—Ç"], ["–û—Ç–º–µ–Ω–∞"]]',
            'should_be_valid': True
        },
        {
            'name': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
            'json': '[["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2"], ["–ö–Ω–æ–ø–∫–∞ 3"]]',
            'should_be_valid': True
        },
        {
            'name': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞',
            'json': '[["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2"], ["–ö–Ω–æ–ø–∫–∞ 3"',
            'should_be_valid': False
        },
        {
            'name': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –Ω–µ –º–∞—Å—Å–∏–≤',
            'json': '{"–∫–Ω–æ–ø–∫–∞": "—Ç–µ–∫—Å—Ç"}',
            'should_be_valid': False
        },
        {
            'name': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –Ω–µ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤',
            'json': '["–ö–Ω–æ–ø–∫–∞ 1", "–ö–Ω–æ–ø–∫–∞ 2"]',
            'should_be_valid': False
        },
        {
            'name': '–ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏',
            'json': '[["", "–ö–Ω–æ–ø–∫–∞ 2"], ["–ö–Ω–æ–ø–∫–∞ 3"]]',
            'should_be_valid': False
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        try:
            parsed = json.loads(test_case['json'])
            is_valid = True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
            if isinstance(parsed, list):
                for row in parsed:
                    if not isinstance(row, list):
                        is_valid = False
                        break
                    for btn in row:
                        if not isinstance(btn, str) or btn.strip() == '':
                            is_valid = False
                            break
            else:
                is_valid = False
                
        except json.JSONDecodeError:
            is_valid = False
        
        status = "‚úÖ" if is_valid == test_case['should_be_valid'] else "‚ùå"
        print(f"{status} {i}. {test_case['name']}")
        print(f"   JSON: {test_case['json']}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {'–≤–∞–ª–∏–¥–µ–Ω' if test_case['should_be_valid'] else '–Ω–µ–≤–∞–ª–∏–¥–µ–Ω'}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–≤–∞–ª–∏–¥–µ–Ω' if is_valid else '–Ω–µ–≤–∞–ª–∏–¥–µ–Ω'}")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ Bot Creator Platform")
    print("=" * 70)
    
    test_button_blocks()
    test_json_validation()
    
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ:")
    print("   http://localhost:5002/create-bot")

if __name__ == '__main__':
    main()